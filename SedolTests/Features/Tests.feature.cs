// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace SedolTests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Sedol Checker Validation")]
    public partial class SedolCheckerValidationFeature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Tests.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Sedol Checker Validation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Null, empty string or string other than 7 characters long")]
        [NUnit.Framework.TestCaseAttribute("", "False", "False", new string[0])]
        [NUnit.Framework.TestCaseAttribute("12", "False", "False", new string[0])]
        [NUnit.Framework.TestCaseAttribute("123456789", "False", "False", new string[0])]
        public virtual void NullEmptyStringOrStringOtherThan7CharactersLong(string inputString, string isValidSedol, string isUserDefined, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Null, empty string or string other than 7 characters long", exampleTags);
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputString",
                        "IsValidSedol",
                        "IsUserDefined"});
            table1.AddRow(new string[] {
                        string.Format("{0}", inputString),
                        string.Format("{0}", isValidSedol),
                        string.Format("{0}", isUserDefined)});
#line 5
    testRunner.Given("the following sedol values:", ((string)(null)), table1, "Given ");
#line 8
    testRunner.Then("the validation message should be \'Input string was not 7-characters long.\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid non user define SEDOL")]
        public virtual void InvalidNonUserDefineSEDOL()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid non user define SEDOL", ((string[])(null)));
#line 17
 this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputString",
                        "IsValidSedol",
                        "IsUserDefined"});
            table2.AddRow(new string[] {
                        "1234567",
                        "False",
                        "False"});
#line 18
    testRunner.Given("the following sedol values:", ((string)(null)), table2, "Given ");
#line 21
    testRunner.Then("the validation message should be \'Checksum digit does not agree with the rest of " +
                    "the input\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid non user define SEDOL")]
        [NUnit.Framework.TestCaseAttribute("0709954", "True", "False", new string[0])]
        [NUnit.Framework.TestCaseAttribute("B0YBKJ7", "True", "False", new string[0])]
        public virtual void ValidNonUserDefineSEDOL(string inputString, string isValidSedol, string isUserDefined, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid non user define SEDOL", exampleTags);
#line 25
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputString",
                        "IsValidSedol",
                        "IsUserDefined"});
            table3.AddRow(new string[] {
                        string.Format("{0}", inputString),
                        string.Format("{0}", isValidSedol),
                        string.Format("{0}", isUserDefined)});
#line 26
    testRunner.Given("the following sedol values:", ((string)(null)), table3, "Given ");
#line 29
    testRunner.Then("the validation message should be \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Invalid user defined SEDOL")]
        [NUnit.Framework.TestCaseAttribute("9123451", "False", "True", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9ABCDE8", "False", "True", new string[0])]
        public virtual void InvalidUserDefinedSEDOL(string inputString, string isValidSedol, string isUserDefined, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Invalid user defined SEDOL", exampleTags);
#line 38
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputString",
                        "IsValidSedol",
                        "IsUserDefined"});
            table4.AddRow(new string[] {
                        string.Format("{0}", inputString),
                        string.Format("{0}", isValidSedol),
                        string.Format("{0}", isUserDefined)});
#line 39
    testRunner.Given("the following sedol values:", ((string)(null)), table4, "Given ");
#line 42
    testRunner.Then("the validation message should be \'Checksum digit does not agree with the rest of " +
                    "the input\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Valid user defined SEDOL")]
        [NUnit.Framework.TestCaseAttribute("9123458", "True", "True", new string[0])]
        [NUnit.Framework.TestCaseAttribute("9ABCDE1", "True", "True", new string[0])]
        public virtual void ValidUserDefinedSEDOL(string inputString, string isValidSedol, string isUserDefined, string[] exampleTags)
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Valid user defined SEDOL", exampleTags);
#line 51
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "InputString",
                        "IsValidSedol",
                        "IsUserDefined"});
            table5.AddRow(new string[] {
                        string.Format("{0}", inputString),
                        string.Format("{0}", isValidSedol),
                        string.Format("{0}", isUserDefined)});
#line 52
    testRunner.Given("the following sedol values:", ((string)(null)), table5, "Given ");
#line 55
    testRunner.Then("the validation message should be \'\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
